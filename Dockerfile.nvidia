FROM  nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04
# TODO: Check GPU support with nvidia-docker
LABEL Author, Sebastian Borquez

# Install Miniconda3 (from minconda Dockerfile)
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

RUN apt-get update -q && \
    apt-get install -q -y \
        bzip2 \
        ca-certificates \
        git \
        libglib2.0-0 \
        libsm6 \
        libxext6 \
        libxrender1 \
        mercurial \
        subversion \
        wget \
    && apt-get clean

ENV PATH /opt/conda/bin:$PATH

CMD [ "/bin/bash" ]

# Leave these args here to better use the Docker build cache
ARG CONDA_VERSION=py38_4.9.2
ARG CONDA_MD5=122c8c9beb51e124ab32a0fa6426c656

RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh -O miniconda.sh && \
    echo "${CONDA_MD5}  miniconda.sh" > miniconda.md5 && \
    if ! md5sum --status -c miniconda.md5; then exit 1; fi && \
    mkdir -p /opt && \
    sh miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh miniconda.md5 && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda clean -afy


# Define a variable with an optional default value that can be override at 
# build-time with docker build.
ARG HER2BDL_VERSION=dev
# TODO: change it when merge to master
#ARG HER2BDL_VERSION=master 

# The environment variables set using ENV will persist when a container is run 
# from the resulting image. You can view the values using docker inspect, and 
# change them using docker run --env <key>=<value>.
ENV WAND_AND_KEY=dryrun

#---------------- Prepare the envirennment ----------------
RUN apt-get update && apt-get install -y \
	gcc
RUN git clone -b ${HER2BDL_VERSION} --single-branch \
    https://github.com/sborquez/her2bdl 
ENV APP_HOME /her2bdl
WORKDIR $APP_HOME

# Dataset folder mounted from host
ENV APP_DATA /datasets
RUN mkdir ${APP_DATA}
# Configurations files and runs
ENV APP_EXPERIMENTS /experiments
RUN mkdir ${APP_EXPERIMENTS}
# Host repository folder mounted from host to local development
ENV APP_DEV /her2bdl_dev
RUN mkdir ${APP_DEV}

RUN conda update --name base conda &&\
    conda env create --file environment_gpu.yml

SHELL ["conda", "run", "--name", "her2bdl", "/bin/bash", "-c"]

#CMD 
# TODO: container commands
# ENTRYPOINT ["conda", "run", "--name", "her2dbl", "python", "main.py"]
